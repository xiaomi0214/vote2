pipeline {
    agent none
    stages {

//         stage('Scan Code with Sonarqube') {
            when {
                changeset "**/result/**"
            }
//             agent {
//                 kubernetes {
//                     defaultContainer 'sonar-scanner'
//                     yaml """
// kind: Pod
// spec:
//   containers:
//   - name: sonar-scanner
//     image: sonarsource/sonar-scanner-cli@sha256:e028b6fd811f0184a3ff7f223a66908c3c359fa559c97fa2ee87042c2b540415
//     imagePullPolicy: Always
//     command:
//     - sleep
//     args:
//     - 99d
// """
//                 }
//             }

//             environment {
//                 HARBOR_URL     = credentials('harbor-url')
//                 SONAR_TOKEN     = credentials('sonarqube-token')
//                 SONAR_SCANNER_OPTS = "-Dsonar.projectKey=result -Dsonar.token=${SONAR_TOKEN}"
//                 SONAR_HOST_URL = "http://sonar${HARBOR_URL.replaceAll('harbor','')}."
//             }

//             steps {
//                 container(name: 'sonar-scanner', shell: '/bin/sh') {
//                     withSonarQubeEnv('SonarQube') {
//                         sh '''#!/bin/sh
//                             cd result
//                             sonar-scanner
//                         '''
//                     }
//                     timeout(time: 1, unit: 'HOURS') {
//                         waitForQualityGate abortPipeline: true
//                     }
//                 }
//             }
//         }

        stage('Build with Kaniko') {
            // when {
            //     changeset "**/result/*.*"
            // }
            agent {
                kubernetes {
                    defaultContainer 'kaniko'
                    //workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: "jenkins-workspace-pvc", readOnly: false)
                    yaml """
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.11.0-debug
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: regcred
          items:
            - key: .dockerconfigjson
              path: config.json
"""
                }
            }

            environment {
                HARBOR_URL     = credentials('harbor-url')
                // HARBOR_URL     ="harbor.lx.gkdevopscamp.uk"
                IMAGE_PUSH_DESTINATION="${HARBOR_URL}/vote/result"
                GIT_COMMIT="${checkout (scm).GIT_COMMIT}"
                IMAGE_TAG = "${BRANCH_NAME}-${GIT_COMMIT}"
                BUILD_IMAGE="${IMAGE_PUSH_DESTINATION}:${IMAGE_TAG}"
                BUILD_IMAGE_LATEST="${IMAGE_PUSH_DESTINATION}:latest"
            }

            steps {
                container(name: 'kaniko', shell: '/busybox/sh') {
                    withEnv(['PATH+EXTRA=/busybox']) {
                        sh '''#!/busybox/sh
                            cd result
                            /kaniko/executor --context `pwd` --destination $BUILD_IMAGE --insecure
                        '''
                        ///kaniko/executor --context `pwd` --destination $IMAGE_PUSH_DESTINATION --insecure
                    }
                }
            }
        }
    }
}
